<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[network]]></title>
      <url>http://hlei.io/2017/03/08/network/</url>
      <content type="html"><![CDATA[<p>tcp<br>使用分隔符<br>通过包头记录包的长度</p>
<p><img src="land.jpg" alt="Alt text"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx内存管理]]></title>
      <url>http://hlei.io/2017/02/26/nginx-mem-manage/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-ipc]]></title>
      <url>http://hlei.io/2017/02/23/linux-ipc/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>linux下的进程通信手段基本上是从Unix平台上的进程通信手段继承而来的。而对Unix发展做出重大贡献的两大主力AT&amp;T的贝尔实验室及BSD（加州大学伯克利分校的伯克利软件发布中心）在进程间通信方面的侧重点有所不同。前者对Unix早期的进程间通信手段进行了系统的改进和扩充，形成了“system V IPC”，通信进程局限在单个计算机内；后者则跳过了该限制，形成了基于套接口（socket）的进程间通信机制。Linux则把两者继承了下来，如图示：</p>
<h2 id="共享内存的使用"><a href="#共享内存的使用" class="headerlink" title="共享内存的使用"></a>共享内存的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">#include &lt;sys/types.h&gt;</div><div class="line">#include &lt;sys/ipc.h&gt;</div><div class="line">#include &lt;sys/shm.h&gt;</div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line"></div><div class="line">#define ARRAY_SIZE   40000</div><div class="line">#define MALLOC_SIZE  100000</div><div class="line">#define SHM_SIZE  100000</div><div class="line">#define SHM_MODE  (SHM_R | SHM_W)</div><div class="line"></div><div class="line">char array[ARRAY_SIZE];</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	int shmid;</div><div class="line">	char *ptr, *shmptr;</div><div class="line"></div><div class="line">	printf(&quot;array[] from %x to %x \n&quot;, &amp;array[0], &amp;array[ARRAY_SIZE]);</div><div class="line">	printf(&quot;stack around %x \n&quot;, &amp;shmid);</div><div class="line"></div><div class="line">	if (NULL == (ptr = (char*)malloc(MALLOC_SIZE)))</div><div class="line">	&#123;</div><div class="line">		printf(&quot;malloc error&quot;);</div><div class="line">		exit(-1);</div><div class="line">	&#125;</div><div class="line">	printf(&quot;malloced from %x to %x \n&quot;, ptr, ptr+MALLOC_SIZE);</div><div class="line"></div><div class="line">	if ((shmid = shmget(IPC_PRIVATE, SHM_SIZE, SHM_MODE)) &lt;0)</div><div class="line">	&#123;</div><div class="line">		printf(&quot;shmget error&quot;);</div><div class="line">		exit(-1);</div><div class="line">	&#125;</div><div class="line">	if ( (shmptr = (char*)shmat(shmid, NULL, 0)) == (void*)-1 )</div><div class="line">	&#123;</div><div class="line">		printf(&quot;shmat error&quot;);</div><div class="line">		exit(-1);</div><div class="line">	&#125;</div><div class="line">	printf(&quot;shared memory attached from %x to %x \n&quot;,</div><div class="line">			shmptr, shmptr+SHM_SIZE);</div><div class="line"></div><div class="line">	if (shmctl(shmid, IPC_RMID, 0) &lt;0)</div><div class="line">	&#123;</div><div class="line">		printf(&quot;shmctl error&quot;);</div><div class="line">		exit(-1);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[What is Hexo?]]></title>
      <url>http://hlei.io/2017/02/22/hello-world/</url>
      <content type="html"><![CDATA[<h2 id="1-Hexo简介"><a href="#1-Hexo简介" class="headerlink" title="1. Hexo简介"></a>1. Hexo简介</h2><p>Hexo 是一款基于 Node.js 的静态博客框架。Hexo 使用 Markdown 解析文章，用户在本地安装Hexo并进行写作，通过一条命令，Hexo即可利用靓丽的主题自动生成静态网页。<br>参考：Hexo Github地址     Hexo帮助文档(<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">https://hexo.io/zh-cn/docs/</a>)</p>
<h2 id="2-如何使用Hexo搭建自己的博客"><a href="#2-如何使用Hexo搭建自己的博客" class="headerlink" title="2. 如何使用Hexo搭建自己的博客"></a>2. 如何使用Hexo搭建自己的博客</h2><h3 id="uninstall-old-version-of-nodejs-amp-npm"><a href="#uninstall-old-version-of-nodejs-amp-npm" class="headerlink" title="uninstall old version of nodejs &amp; npm"></a>uninstall old version of nodejs &amp; npm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get purge nodejs npm</div></pre></td></tr></table></figure>
<h3 id="update-gcc-g"><a href="#update-gcc-g" class="headerlink" title="update gcc g++"></a>update gcc g++</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:ubuntu-toolchain-r/<span class="built_in">test</span></div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install gcc-4.9</div><div class="line">sudo apt-get install g++-4.9</div><div class="line"></div><div class="line">update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 100</div><div class="line">update-alternatives --install /usr/bin/gcc gcc /usr/bin/g++-4.9 100</div></pre></td></tr></table></figure>
<h3 id="install-nodejs"><a href="#install-nodejs" class="headerlink" title="install nodejs"></a>install nodejs</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ wget https://nodejs.org/dist/v6.9.5/node-v6.9.5.tar.gz</div><div class="line">$ tar xvf node-v6.9.5.tar.gz</div><div class="line">$ ./configure</div><div class="line">$ make </div><div class="line">$ make install</div></pre></td></tr></table></figure>
<h3 id="install-npm"><a href="#install-npm" class="headerlink" title="install npm"></a>install npm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install npm</div></pre></td></tr></table></figure>
<h3 id="check-res"><a href="#check-res" class="headerlink" title="check res"></a>check res</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">v6.9.5</div><div class="line"></div><div class="line">$ npm -v</div><div class="line">3.10.10</div></pre></td></tr></table></figure>
<h3 id="安装并初始化Hexo"><a href="#安装并初始化Hexo" class="headerlink" title="安装并初始化Hexo"></a>安装并初始化Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>安装完成后，指定文件夹的目录如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1 ├── _config.yml</div><div class="line">2 ├── package.json</div><div class="line">3 ├── scaffolds</div><div class="line">4 ├── <span class="built_in">source</span></div><div class="line">5 |   ├── _drafts</div><div class="line">6 |   └── _posts</div><div class="line">7 └── themes</div></pre></td></tr></table></figure></p>
<p>其中_config.yml文件用于存放网站的配置信息，你可以在此配置大部分的参数；scaffolds是存放模板的文件夹，当新建文章时，Hexo 会根据scaffold来建立文件；source是资源文件夹，用于存放用户资源，themes是主题文件夹，存放博客主题，Hexo 会根据主题来生成静态页面。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[redis-analysis]]></title>
      <url>http://hlei.io/2017/02/22/redis-analysis/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring Summary 1：Quartz定时任务为什么会被阻塞]]></title>
      <url>http://hlei.io/2017/02/22/spring-task/</url>
      <content type="html"><![CDATA[<ol>
<li><p>写了两个job</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">@Service</div><div class="line">public class TestTask1 &#123;</div><div class="line">    private final static Logger logger = LoggerFactory.getLogger(AuthCheckTask.class);</div><div class="line">    private long count = 0;</div><div class="line">    private AtomicInteger number = new AtomicInteger(0);</div><div class="line"></div><div class="line">    public   void  execute()&#123;</div><div class="line">        logger.info(&quot;execute TestTask1(&quot; + new Date()+ &quot;) begin number=&#123;&#125;&quot;, number.get());</div><div class="line">        try  &#123;</div><div class="line">            Thread.sleep(1000000);</div><div class="line">        &#125;catch (InterruptedException ire) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        logger.info(&quot;execute TestTask1(&quot; + new Date()+ &quot;) end number=&#123;&#125;&quot;, number.get());</div><div class="line">        number.incrementAndGet();</div><div class="line">        //++count;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Service</div><div class="line">public class TestTask2 &#123;</div><div class="line">    private final static Logger logger = LoggerFactory.getLogger(AuthCheckTask.class);</div><div class="line">    private AtomicInteger number = new AtomicInteger(0);</div><div class="line">    private static final int nCount = 5;</div><div class="line">    private long count = 0;</div><div class="line"></div><div class="line"></div><div class="line">    public   void  execute()&#123;</div><div class="line">        logger.info(&quot;execute TestTask2(&quot; + new Date()+ &quot;) begin number=&#123;&#125;&quot;, number.get());</div><div class="line">        try  &#123;</div><div class="line">            Thread.sleep(10000);</div><div class="line">        &#125;catch (InterruptedException ire) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        logger.info(&quot;execute TestTask2(&quot; + new Date()+ &quot;) end number=&#123;&#125;&quot;, number.get());</div><div class="line">        number.incrementAndGet();</div><div class="line">        //++count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>任务并发执行时的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;startQuertz&quot; lazy-init=&quot;false&quot; autowire=&quot;no&quot; class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;</div><div class="line">    &lt;property name=&quot;triggers&quot;&gt;</div><div class="line">        &lt;list&gt;</div><div class="line">            &lt;ref bean=&quot;testTask1Job&quot; /&gt;</div><div class="line">            &lt;ref bean=&quot;testTask2Job&quot; /&gt;</div><div class="line">        &lt;/list&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;bean id=&quot;testTask1Task&quot; class=&quot;org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean&quot;&gt;</div><div class="line">    &lt;!-- 调用的类 --&gt;</div><div class="line">    &lt;property name=&quot;targetObject&quot;&gt;</div><div class="line">        &lt;ref bean=&quot;testTask1&quot; /&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- 调用类中的方法 --&gt;</div><div class="line">    &lt;property name=&quot;targetMethod&quot;&gt;</div><div class="line">        &lt;value&gt;execute&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property name=&quot;concurrent&quot; value = &quot;false&quot;/&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line">&lt;!-- vip 订阅统计job定时 --&gt;</div><div class="line">&lt;bean id=&quot;testTask1Job&quot; class=&quot;org.springframework.scheduling.quartz.CronTriggerBean&quot;&gt;</div><div class="line">    &lt;property name=&quot;jobDetail&quot;&gt;</div><div class="line">        &lt;ref bean=&quot;testTask1Task&quot; /&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- cron表达式 --&gt;</div><div class="line">    &lt;property name=&quot;cronExpression&quot;&gt;</div><div class="line">        &lt;value&gt;0/5 * * * * ?&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;bean id=&quot;testTask2Task&quot; class=&quot;org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean&quot;&gt;</div><div class="line">    &lt;!-- 调用的类 --&gt;</div><div class="line">    &lt;property name=&quot;targetObject&quot;&gt;</div><div class="line">        &lt;ref bean=&quot;testTask2&quot; /&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- 调用类中的方法 --&gt;</div><div class="line">    &lt;property name=&quot;targetMethod&quot;&gt;</div><div class="line">        &lt;value&gt;execute&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line">&lt;!-- vip 订阅统计job定时 --&gt;</div><div class="line">&lt;bean id=&quot;testTask2Job&quot; class=&quot;org.springframework.scheduling.quartz.CronTriggerBean&quot;&gt;</div><div class="line">    &lt;property name=&quot;jobDetail&quot;&gt;</div><div class="line">        &lt;ref bean=&quot;testTask2Task&quot; /&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- cron表达式 --&gt;</div><div class="line">    &lt;property name=&quot;cronExpression&quot;&gt;</div><div class="line">        &lt;value&gt;0/5 * * * * ?&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>任务并发执行结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[DEBUG 2017-02-23 14:43:50.001 startQuertz_Worker-3] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask2Task)</div><div class="line">[INFO  2017-02-23 14:43:50.002 startQuertz_Worker-3] com.huyu.zhibo.task.TestTask2.execute(TestTask2.java:22) (execute TestTask2(Thu Feb 23 14:43:50 CST 2017) begin number=0)</div><div class="line">[DEBUG 2017-02-23 14:43:55.000 startQuertz_Worker-4] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask2Task)</div><div class="line">[INFO  2017-02-23 14:43:55.006 startQuertz_Worker-4] com.huyu.zhibo.task.TestTask2.execute(TestTask2.java:22) (execute TestTask2(Thu Feb 23 14:43:55 CST 2017) begin number=0)</div><div class="line">[DEBUG 2017-02-23 14:43:57.462 main-SendThread(zc-jm-zookeeper04.bj:2181)] org.apache.zookeeper.ClientCnxn$SendThread.readResponse(ClientCnxn.java:714) (Got ping response for sessionid: 0x25939635b71730c after 1ms)</div><div class="line">[DEBUG 2017-02-23 14:44:00.000 startQuertz_Worker-5] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask2Task)</div><div class="line">[INFO  2017-02-23 14:44:00.005 startQuertz_Worker-5] com.huyu.zhibo.task.TestTask2.execute(TestTask2.java:22) (execute TestTask2(Thu Feb 23 14:44:00 CST 2017) begin number=0)</div><div class="line">[DEBUG 2017-02-23 14:44:05.000 startQuertz_Worker-6] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask2Task)</div><div class="line">[INFO  2017-02-23 14:44:05.001 startQuertz_Worker-6] com.huyu.zhibo.task.TestTask2.execute(TestTask2.java:22) (execute TestTask2(Thu Feb 23 14:44:05 CST 2017) begin number=0)</div><div class="line">[DEBUG 2017-02-23 14:44:07.462 main-SendThread(zc-jm-zookeeper04.bj:2181)] org.apache.zookeeper.ClientCnxn$SendThread.readResponse(ClientCnxn.java:714) (Got ping response for sessionid: 0x25939635b71730c after 0ms)</div><div class="line">[DEBUG 2017-02-23 14:44:10.001 startQuertz_Worker-7] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask2Task)</div><div class="line">[INFO  2017-02-23 14:44:10.004 startQuertz_Worker-7] com.huyu.zhibo.task.TestTask2.execute(TestTask2.java:22) (execute TestTask2(Thu Feb 23 14:44:10 CST 2017) begin number=0)</div><div class="line">[DEBUG 2017-02-23 14:44:15.000 startQuertz_Worker-8] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask2Task)</div><div class="line">[INFO  2017-02-23 14:44:15.001 startQuertz_Worker-8] com.huyu.zhibo.task.TestTask2.execute(TestTask2.java:22) (execute TestTask2(Thu Feb 23 14:44:15 CST 2017) begin number=0)</div><div class="line">[DEBUG 2017-02-23 14:44:17.463 main-SendThread(zc-jm-zookeeper04.bj:2181)] org.apache.zookeeper.ClientCnxn$SendThread.readResponse(ClientCnxn.java:714) (Got ping response for sessionid: 0x25939635b71730c after 0ms)</div><div class="line">[DEBUG 2017-02-23 14:44:20.000 startQuertz_Worker-9] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask2Task)</div><div class="line">[INFO  2017-02-23 14:44:20.001 startQuertz_Worker-9] com.huyu.zhibo.task.TestTask2.execute(TestTask2.java:22) (execute TestTask2(Thu Feb 23 14:44:20 CST 2017) begin number=0)</div><div class="line">[DEBUG 2017-02-23 14:44:25.001 startQuertz_Worker-10] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask2Task)</div><div class="line">[INFO  2017-02-23 14:44:25.002 startQuertz_Worker-10] com.huyu.zhibo.task.TestTask2.execute(TestTask2.java:22) (execute TestTask2(Thu Feb 23 14:44:25 CST 2017) begin number=0)</div></pre></td></tr></table></figure>
</li>
<li><p>task1修改为同步执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;property name=&quot;concurrent&quot; value = &quot;false&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>task1修改为同步执行结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[INFO] Started Jetty Server</div><div class="line">[DEBUG 2017-02-23 14:48:25.000 startQuertz_Worker-3] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask1Task)</div><div class="line">[INFO  2017-02-23 14:48:25.001 startQuertz_Worker-3] com.huyu.zhibo.task.TestTask1.execute(TestTask1.java:20) (execute TestTask1(Thu Feb 23 14:48:25 CST 2017) begin number=0)</div><div class="line">[DEBUG 2017-02-23 14:48:25.001 startQuertz_Worker-4] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask2Task)</div><div class="line">[INFO  2017-02-23 14:48:25.002 startQuertz_Worker-4] com.huyu.zhibo.task.TestTask2.execute(TestTask2.java:22) (execute TestTask2(Thu Feb 23 14:48:25 CST 2017) begin number=0)</div><div class="line">[DEBUG 2017-02-23 14:48:30.001 startQuertz_Worker-5] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask1Task)</div><div class="line">[INFO  2017-02-23 14:48:30.002 startQuertz_Worker-5] com.huyu.zhibo.task.TestTask1.execute(TestTask1.java:20) (execute TestTask1(Thu Feb 23 14:48:30 CST 2017) begin number=0)</div><div class="line">[DEBUG 2017-02-23 14:48:30.002 startQuertz_Worker-6] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask2Task)</div><div class="line">[INFO  2017-02-23 14:48:30.002 startQuertz_Worker-6] com.huyu.zhibo.task.TestTask2.execute(TestTask2.java:22) (execute TestTask2(Thu Feb 23 14:48:30 CST 2017) begin number=0)</div><div class="line">[DEBUG 2017-02-23 14:48:31.196 main-SendThread(sq-jm-stag03.bj:2181)] org.apache.zookeeper.ClientCnxn$SendThread.readResponse(ClientCnxn.java:714) (Got ping response for sessionid: 0x559396358edd1cb after 0ms)</div><div class="line">[DEBUG 2017-02-23 14:48:35.000 startQuertz_Worker-7] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask1Task)</div><div class="line">[INFO  2017-02-23 14:48:35.002 startQuertz_Worker-7] com.huyu.zhibo.task.TestTask1.execute(TestTask1.java:20) (execute TestTask1(Thu Feb 23 14:48:35 CST 2017) begin number=0)</div><div class="line">[DEBUG 2017-02-23 14:48:35.002 startQuertz_Worker-8] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask2Task)</div><div class="line">[INFO  2017-02-23 14:48:35.002 startQuertz_Worker-8] com.huyu.zhibo.task.TestTask2.execute(TestTask2.java:22) (execute TestTask2(Thu Feb 23 14:48:35 CST 2017) begin number=0)</div><div class="line">[DEBUG 2017-02-23 14:48:40.000 startQuertz_Worker-9] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask1Task)</div><div class="line">[INFO  2017-02-23 14:48:40.001 startQuertz_Worker-9] com.huyu.zhibo.task.TestTask1.execute(TestTask1.java:20) (execute TestTask1(Thu Feb 23 14:48:40 CST 2017) begin number=0)</div><div class="line">[DEBUG 2017-02-23 14:48:40.001 startQuertz_Worker-10] org.quartz.core.JobRunShell.run(JobRunShell.java:201) (Calling execute on job DEFAULT.testTask2Task)</div><div class="line">[INFO  2017-02-23 14:48:40.002 startQuertz_Worker-10] com.huyu.zhibo.task.TestTask2.execute(TestTask2.java:22) (execute TestTask2(Thu Feb 23 14:48:40 CST 2017) begin number=0)</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[H]]></title>
      <url>http://hlei.io/2017/02/09/first/</url>
      <content type="html"></content>
    </entry>
    
  
  
</search>
